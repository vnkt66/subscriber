{"version":3,"sources":["containers/App.css","components/Subscriber.js","containers/Add.js","containers/App.js","store/reducer.js","serviceWorker.js","index.js","containers/Add.css"],"names":["module","exports","App","subscriber","_this","this","react_default","a","createElement","className","classes","phonedirectory","Link","to","goback","type","onChange","event","props","addNameHandler","value","name","addPhoneHandler","phone","button","onClick","addPersonHanlder","Component","connect","state","dispatch","val","target","Add","Container","Row","Col","persons","map","person","index","delete","deletePersonHandler","Route","path","exact","component","Subscriber","initialState","reducer","arguments","length","undefined","action","Object","objectSpread","personadded","toConsumableArray","concat","deletepersons","splice","Boolean","window","location","hostname","match","store","createStore","Reducer","ReactDOM","render","es","BrowserRouter","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28fe1f7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__3t9oX\"};","import React,{ Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport classes from '../containers/Add.css';\r\n\r\nclass subscriber extends Component {\r\n\r\n\trender() {\r\n      return (\r\n          <div>\r\n          <p className={classes.phonedirectory}>\r\n            ADD SUBSCRIBER\r\n          </p>\r\n          <div>\r\n            <Link to='/'>\r\n              <button className={classes.goback}>Go Back</button>\r\n            </Link>\r\n            <h1>Name</h1>\r\n            <input type='text' onChange={(event) => this.props.addNameHandler(event)} value= {this.props.name} />\r\n            <h1>Phone</h1>\r\n            <input type='text' onChange={(event) => this.props.addPhoneHandler(event)} value= {this.props.phone} />\r\n            <hr/>\r\n            <h3>subscriber to be added:</h3>\r\n            <span>Name:</span>\r\n            <span>{this.props.name}</span>\r\n            <hr/>\r\n            <span>Phone:</span>\r\n            <span>{this.props.phone}</span>\r\n            <hr/>\r\n            <button className={classes.button} onClick={() => this.props.addPersonHanlder()}>\r\n              ADD\r\n            </button>\r\n          </div>\r\n          </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n  \tname: state.name,\r\n    phone: state.phone\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addNameHandler: (event) => dispatch({type: 'NAMEHANDLER', val: event.target.value}),\r\n    addPhoneHandler: (event) => dispatch({type: 'PHONEHANDLER', val: event.target.value}),\r\n    addPersonHanlder: () => dispatch({type: 'ADDPERSONHANDLER'})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(subscriber);","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport classes from './Add.css';\r\n\r\nclass Add extends Component {\r\n  render() {\r\n    return (\r\n         <div>\r\n         <p className={classes.phonedirectory}>\r\n            PHONE DIRECTORY\r\n          </p>\r\n         <div>\r\n         <Link to='/subscriber'> \r\n            <button className={classes.button}>ADD</button>\r\n         </Link>\r\n         <Container>\r\n           <Row>\r\n             <Col>Name</Col>\r\n             <Col>Phone</Col>\r\n             <Col></Col>\r\n           </Row>\r\n         </Container>\r\n         {this.props.persons.map((person, index) => (\r\n                      <div>\r\n                      <Container>\r\n                      <Row>\r\n                      <Col><p>{person.name}</p></Col>\r\n                      <Col><p>{person.phone}</p></Col>\r\n                      <Col>\r\n                        <button className={classes.delete} onClick={() => this.props.deletePersonHandler(index)}>Delete</button>\r\n                      </Col>\r\n                      </Row>\r\n                      </Container>\r\n                       </div>\r\n                      \r\n         ))}    \r\n         </div>\r\n         </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    persons : state.person\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deletePersonHandler: (index) => dispatch({type: 'DELETEHANDLER', val: index}) \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Add);","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Subscriber from '../components/Subscriber';\n\nimport Add from './Add';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n    <div>\n    <Route path='/' exact component={Add}/>\n    <Route path='/subscriber' component={Subscriber} />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const initialState = {\r\n\tname: '',\r\n\tphone: '',\r\n\tperson: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\tif(action.type==='NAMEHANDLER') {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tname: action.val\r\n\t\t}\r\n\t}\r\n\tif(action.type==='PHONEHANDLER') {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tphone: action.val\r\n\t\t}\r\n\t}\r\n\tif(action.type==='ADDPERSONHANDLER') {\r\n\t\tvar persons = [...state.person];\r\n\t\tvar personadded = persons.concat({name: state.name, phone: state.phone});\r\n        \r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tperson: personadded \r\n\t\t}\r\n\t}\r\n    if(action.type==='DELETEHANDLER') {\r\n\t\tvar deletepersons = [...state.person];\r\n\t    deletepersons.splice(action.val, 1);\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tperson: deletepersons \r\n\t\t}\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\nexport default reducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport { BrowserRouter } from 'react-router-dom'; \nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport Reducer from './store/reducer';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nconst store = createStore(Reducer);\n\nReactDOM.render(<Provider store={store}><BrowserRouter><App /></BrowserRouter></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonedirectory\":\"Add__phonedirectory__3IC2M\",\"button\":\"Add__button__D6DA8\",\"goback\":\"Add__goback__1Lru6\",\"delete\":\"Add__delete__1_2nF\"};"],"sourceRoot":""}